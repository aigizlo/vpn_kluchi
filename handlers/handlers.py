from aiogram.types import callback_query

from logs.logger import logger
from aiogram.dispatcher import FSMContext

from logic_keys.add_keys import add_keys
from user_data import UserData, check_user_in_system
from db_conn.get_conn import create_connection
from config import dp, bot, err_send, support
from keyboards.keyboards import *
from states import MyStates
from text import answer_error, offer_free_plan, text_free_tariff, instruction, offer_free_plan_2



user_data = UserData()

server_id_country = {
    1: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã –ê–º—Å—Ç–µ—Ä–¥–∞–º',
    2: '–ì–µ—Ä–º–∞–Ω–∏—è –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç',
    3: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –ê—Å—Ç–∞–Ω–∞',
    4: '–†–æ—Å—Å–∏—è',
    5: '–¢—É—Ä—Ü–∏—è –°—Ç–∞–º–±—É–ª'
}

main_menu_handlers = ['üîê–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'üîô–ù–∞–∑–∞–¥', 'üîë–ú–æ–∏ –∫–ª—é—á–∏', 'üí∞–ë–∞–ª–∞–Ω—Å', 'üíµ–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞']


# @dp.message_handler(lambda message: message.text in main_menu_handlers, state="*")
# async def get_key_command(message: types.Message, state: FSMContext):


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
@dp.message_handler(lambda message: message.text == 'üîê–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', state="*")
async def get_key_command(message: types.Message, state: FSMContext):

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–≤–∞—Ç—É—Ä—É

    keyboard = kb_servers()
    answer = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:"
    # cur_state = await state.get_state()
    await state.set_state(MyStates.state_get_keys)

    logger.info(f"PROCESS:get_key_command, user - {message.from_user.id}")

    await message.answer(answer, reply_markup=keyboard)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == 'üîô–ù–∞–∑–∞–¥', state='*')
async def back_command(message: types.Message, state: FSMContext):

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    states = [MyStates.state_get_keys, MyStates.state_my_keys]
    cur_state = await state.get_state()
    User_Data = UserData()
    keyboard = main_menu()
    logger.info(f"PROCESS:back_command, user - {message.from_user.id}")
    if cur_state in states:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard)
        await state.finish()

    else:
        await message.answer(instruction, disable_web_page_preview=True,
                             parse_mode='HTML',
                             reply_markup=keyboard)

    try:
        # –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        user_id = User_Data.get_user_id(message.from_user.id)
        # —Åhat_member = await bot.get_chat_member(chat_id="@off_radar", user_id=message.from_user.id)
        # # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
        # if —Åhat_member.status not in ["creator", "administrator", "member", "restricted"]:
        #     if user_id:
        #         # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        #         if User_Data.free_tariff(user_id) == "UNUSED":
        #             await message.answer(offer_free_plan, reply_markup=subscribe())
        #             return

        if user_id:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
            if User_Data.free_tariff(user_id) == "UNUSED":
                await message.answer(offer_free_plan_2, reply_markup=free_tariff())
    except Exception as e:
        logger.error(f"ERROR:back_command, user - {message.from_user.id}, –æ—à–∏–±–∫–∞ - {e}")
        answer = answer_error
        await message.answer(answer, reply_markup=keyboard)
        await bot.send_message(err_send, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ù–ê–ó–ê–î - {e}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    await state.finish()


# inline –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@dp.callback_query_handler(lambda c: c.data == "go_back", state="*")
async def process_callback_go_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)

    # main_menu_keyboard = main_menu()


@dp.callback_query_handler(lambda c: c.data == "free_tariff", state="*")
async def free_tariff_select_location(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)

    keyboard = choice_location_free_tariff()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
                           reply_markup=keyboard)
    logger.info(f"PROCESS:free_tariff, user - {callback_query.message.chat.id}")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
@dp.callback_query_handler(lambda c: c.data.startswith('free_select_country:'), state='*')
async def choice_free_tariff(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –∑–∞–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_id = int(callback_query.data.split(':')[1])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(server=server_id)

    main_menu_keyboard = main_menu()
    # –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞
    location = server_id_country.get(server_id)

    try:
        User_Data = UserData()
        # –±–µ—Ä–µ–º –µ–≥–æ user_id
        user_id = User_Data.get_user_id(callback_query.message.chat.id)

        # –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        key_name = location.replace("-", r"\-")

        use_free_tarrif = User_Data.free_tariff(user_id)

        if not use_free_tarrif:
            await bot.send_message(callback_query.message.chat.id, answer_error)
            return

        if use_free_tarrif == "USED":
            answer = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ 14 –¥–Ω–µ–π"

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –æ–Ω —É –Ω–µ–≥–æ —É–∂–µ
        if use_free_tarrif == "UNUSED":
            key_id = await add_keys(server_id, user_id, key_name, 14)

            if key_id:
                key_value = User_Data.get_key_value(key_id)
                answer = text_free_tariff(location, key_value)
                User_Data.change_free_tariff(user_id, 1)
            else:
                answer = answer_error

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.delete_message(chat_id=callback_query.message.chat.id,
                                 message_id=callback_query.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=answer,
                               parse_mode="HTML",
                               disable_web_page_preview=True,
                               reply_markup=main_menu_keyboard)

        logger.info(f"PROCESS:choice_free_tariff, user - {callback_query.message.chat.id}")

    except Exception as e:
        logger.error(f"ERROR:choice_tariff, user - {callback_query.message.chat.id}, –û—à–±–∏–∫–∞ {e}")
        await bot.send_message(callback_query.message.chat.id, answer_error)
        await bot.send_message(err_send, f"–æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ choice_free_tariff {e}, user - {user_id}")


@dp.callback_query_handler(lambda c: c.data == "subscribe_no_thanks", state="*")
async def subscribe_no_thanks(callback_query: types.CallbackQuery):
    User_Data = UserData()
    user_id = User_Data.get_user_id(callback_query.message.chat.id)
    User_Data.change_free_tariff(user_id, 2, )
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∞–∫—Ü–∏–∏")


@dp.callback_query_handler(lambda c: c.data == "subscribe_ago", state="*")
async def check_subscription(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    subscribe_keyboard = subscribe()
    kb_free_tariff = free_tariff()

    try:
        User_Data = UserData()

        user_id = User_Data.get_user_id(telegram_id)
        # –í—ã—è—Å–Ω—è–µ–º, –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —é–∑–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
        use_free_tariff = User_Data.free_tariff_tg(telegram_id)
        print(use_free_tariff)
        chat_member = await bot.get_chat_member(chat_id="@off_radar",
                                                user_id=telegram_id)

        if chat_member.status in ["member", "administrator", "creator", "owner"]:
            if use_free_tariff == "UNUSED":
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫",
                                       reply_markup=kb_free_tariff)
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
            else:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
        else:
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",
                                   reply_markup=subscribe_keyboard)
    except Exception as e:
        logger.error(f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')
        await bot.send_message(err_send, f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')


@dp.message_handler(commands=['my_info'], state="*")
async def my_info(message: types.Message):
    try:

        User_Data = UserData()

        user_id = User_Data.get_user_id(message.from_user.id)

        all_info = User_Data.get_user_info(user_id)

        txt_user_id = f"–ú–æ–π user_id : {user_id}\n"

        answer = txt_user_id + all_info

        await message.reply(answer, disable_web_page_preview=True,
                            parse_mode="HTML")

    except Exception as e:
        logger.info(f"COMMAND_ERROR - /my_info, {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ .{e}")


@dp.message_handler(commands=['help'], state="*")
async def my_info(message: types.Message):
    await message.reply(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {support}")