import aiogram
from create_pay_links import generate_any_pay_link, generate_fropay_link
from text import *
from aiogram.dispatcher import FSMContext
from logger import logger
from config import dp, bot, err_send, secret_key, tg_channel, file_ids
from balance import creating_payment
from keyboards.keyboards import *
from logic_keys.add_keys import add_free_keys
from states import MyStates
from user_data import UserData, check_user_in_system

video_id = None

user_data = UserData()
amount_to_month = {
    1: one_month,
    3: three_month,
    12: one_year
}
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤
#
#
# amount_to_days = {
#     149: 0,
#     269: 1,
#     405: 2,
#     810: 3
# }

amount_to_days = {
    one_month: 31,
    three_month: 93,
    one_year: 365
}
#


country_server_id = {
    'üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è ‚Äì –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç': 1,
    'üá∫üá∏–ê–º–µ—Ä–∏–∫–∞ ‚Äì –õ–æ—Å –ê–Ω–¥–∂–µ–ª–µ—Å': 2}

server_id_country = {
    1: 'üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç',
    2: 'üá∫üá∏–ê–º–µ—Ä–∏–∫–∞ –õ–æ—Å –ê–Ω–¥–∂–µ–ª–µ—Å'
}


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
@dp.callback_query_handler(lambda c: c.data == "get_keys", state="*")
async def get_key_command(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.message.chat.id

    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    if not check_user_in_system(callback_query.message.chat.id):
        await bot.send_message(chat_id=telegram_id,
                               text='–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        return
    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    user_id = user_info[0]

    free_tarrif = user_data.free_tariff(user_id)

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–≤–∞—Ç—É—Ä—É
    keyboard = choice_period_not_free()

    if free_tarrif == "UNUSED":
        keyboard = choice_period()

    answer = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"

    await state.set_state(MyStates.payment_method)

    try:
        await bot.send_photo(chat_id=telegram_id,
                             photo=file_ids["tarrif"],
                             caption=answer,
                             reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, user_id - {user_info}")
    except Exception as e:
        logger.error(f'ERROR - –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, user_id - {user_info} {e}')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('payment_method:'),
                           state=MyStates.payment_method)
async def process_callback_payment_method(callback_query: types.CallbackQuery, state='*'):
    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    user_id = user_info[0]

    telegram_id = callback_query.message.chat.id

    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    price = callback_query.data.split(':')[1]  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É

    answer = '''üîë –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É VPN –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'''

    await state.set_state(MyStates.pay_from_balance)

    # —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    pay_id = creating_payment(price, user_id)

    desc = f'{user_id},{price},{pay_id}'

    any_pay_link = generate_any_pay_link(str(pay_id), desc, str(price), secret_key)
    # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

    fropay_link = generate_fropay_link(str(pay_id), str(price))
    keyboard = kb_pay(price, any_pay_link, fropay_link)
    try:
        await bot.send_photo(chat_id=telegram_id,
                             photo=file_ids["bill"],
                             caption=answer,
                             parse_mode="HTML",
                             reply_markup=keyboard)
        logger.info(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã {user_info}")
    except Exception as e:
        logger.error(f'ERROR - –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã - {user_info}', {e})


# inline –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@dp.callback_query_handler(lambda c: c.data == "go_back", state="*")
async def process_callback_go_back(callback_query: types.CallbackQuery):
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    try:
        await bot.send_photo(chat_id=callback_query.message.chat.id,
                             photo=file_ids['menu'],
                             caption=instruction,
                             parse_mode="HTML",
                             reply_markup=main_menu_inline())
        logger.info(f"–û—Ç–º–µ–Ω–∞ - user - {user_info}")
    except Exception as e:
        logger.error(f'ERROR - –û—Ç–º–µ–Ω–∞ - {user_info}', {e})





@dp.callback_query_handler(lambda c: c.data == "subscribe_check", state="*")
async def subscribe_no_thanks(callback_query: types.CallbackQuery):
    User_Data = UserData()
    telegram_id = callback_query.from_user.id

    user_id = User_Data.get_user_id(telegram_id)

    answer = '''–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!

‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–æ–º –ë–ï–°–ü–õ–ê–¢–ù–û! 
'''

    subscribe_keyboard = subscribe()

    # –í—ã—è—Å–Ω—è–µ–º, –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —é–∑–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
    use_free_tariff = User_Data.free_tariff_tg(telegram_id)
    chat_member = await bot.get_chat_member(chat_id=tg_channel,
                                            user_id=telegram_id)

    if chat_member.status in ["member", "administrator", "creator", "owner"]:
        if use_free_tariff == "UNUSED":

            key_value, server_id = add_free_keys(user_id)

            answer = text_free_tariff(server_id, key_value)

            User_Data.change_free_tariff(user_id, 1)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞

            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=answer, reply_markup=main_menu_inline(),
                                   parse_mode="HTML", disable_web_page_preview=True)

            try:
                if callback_query.message.message_id:
                    await bot.delete_message(chat_id=callback_query.message.chat.id,
                                             message_id=callback_query.message.message_id)
            except aiogram.utils.exceptions.MessageCantBeDeleted:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")

        else:
            try:
                if callback_query.message.message_id:
                    await bot.delete_message(chat_id=callback_query.message.chat.id,
                                             message_id=callback_query.message.message_id)
            except aiogram.utils.exceptions.MessageCantBeDeleted:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=answer,
                               reply_markup=subscribe_keyboard)


#
@dp.callback_query_handler(lambda c: c.data == "subscribe_ago", state="*")
async def check_subscription(callback_query: types.CallbackQuery):
    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    telegram_id = callback_query.from_user.id

    answer = """üéÅ <b>–ü–û–î–ê–†–û–ö –î–õ–Ø –í–ê–° </b>üéÅ

‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–æ–º –ë–ï–°–ü–õ–ê–¢–ù–û! 
"""

    try:
        User_Data = UserData()

        user_id = User_Data.get_user_id(telegram_id)

        await bot.send_photo(chat_id=telegram_id,
                             photo=file_ids['present'],
                             caption=answer,
                             parse_mode="HTML",
                             reply_markup=subscribe())

    except Exception as e:
        logger.error(f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')
        await bot.send_message(err_send,
                               f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')


# @dp.callback_query_handler(lambda c: c.data == "", state="*")
# async def check_subscription(callback_query: types.CallbackQuery):

@dp.message_handler(commands=['my_info'], state="*")
async def my_info(message: types.Message):
    try:
        user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

        user_id = user_info[0]

        all_info = user_data.get_user_info(user_id)

        txt_user_id = f"–ú–æ–π user_id : {user_id}\n"

        answer = txt_user_id + all_info

        await message.reply(answer, disable_web_page_preview=True,
                            parse_mode="HTML")
        logger.info(f"my_info command - user {user_id}")

    except Exception as e:
        logger.info(f"COMMAND_ERROR - /my_info, {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ .{e}")


@dp.callback_query_handler(lambda c: c.data == "why_we", state="*")
async def subscribe_no_thanks(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ. {user_info}")

    try:
        await bot.send_photo(chat_id=telegram_id,
                             photo=file_ids["why_we"],
                             caption=why_we,
                             parse_mode="HTML",
                             reply_markup=main_menu_inline())

        logger.info(f"–ü–æ—á–µ–º—É –º—ã ? {user_info}")
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ü–æ—á–µ–º—É –º—ã? - {user_info}")


@dp.callback_query_handler(lambda c: c.data == "video_inst", state="*")
async def subscribe_no_thanks(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    try:
        if callback_query.message.message_id:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    except aiogram.utils.exceptions.MessageCantBeDeleted:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ. {user_info}")

    try:
        await bot.send_video(chat_id=callback_query.message.chat.id,
                             video=file_ids['video'],
                             caption=instruction,
                             parse_mode="HTML",
                             reply_markup=main_menu_inline2())
        logger.info(f"–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - {user_info}")
    except Exception as e:
        logger.error(f"ERROR - –í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - {user_info}, {e}")


@dp.message_handler(content_types=['photo', 'video', 'document'])
async def handle_docs_photo(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    caption = message.caption if message.caption else "No caption"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        logger.info(f"Photo ID: {photo_id}, Caption: {caption}")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å photo_id –∏ caption –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    elif message.video:
        video_id = message.video.file_id
        logger.info(f"Video ID: {video_id}, Caption: {caption}")


@dp.message_handler(commands=['help'], state="*")
async def my_info(message: types.Message):
    await message.reply(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {support}")


@dp.message_handler(commands=['instruction'], state="*")
async def my_info(message: types.Message):
    await message.reply(instruction, parse_mode="HTML", disable_web_page_preview=True)
