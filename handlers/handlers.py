from create_pay_links import generate_any_pay_link, generate_fropay_link
from text import *
from aiogram.dispatcher import FSMContext
from logger import logger

import asyncio

from config import dp, bot, err_send, one_month, three_month, one_year, secret_key
from balance import pay_from_personal_balance, add_referral_bonus, creating_payment
from keyboards.keyboards import *
from logic_keys.add_keys import add_keys, keys_send, add_free_keys
from logic_keys.renewal_keys import renewal_keys
from states import MyStates
from user_data import UserData, check_user_in_system
from balance import money_back

user_data = UserData()
amount_to_month = {
    1: one_month,
    3: three_month,
    12: one_year
}
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤
#
#
# amount_to_days = {
#     149: 0,
#     269: 1,
#     405: 2,
#     810: 3
# }

amount_to_days = {
    one_month: 31,
    three_month: 93,
    one_year: 365
}
#


country_server_id = {
    'üá±üá∫–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äì –ê–º—Å—Ç–µ—Ä–¥–∞–º': 1,
    'üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è ‚Äì –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç': 2,
    'üá∞üáø–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äì –ê—Å—Ç–∞–Ω–∞': 3,
    'üá∑üá∫–†–æ—Å—Å–∏—è ‚Äì –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 4,
    'üáπüá∑–¢—É—Ä—Ü–∏—è ‚Äì –°—Ç–∞–º–±—É–ª': 5,
    'üá∫üá∏–ê–º–µ—Ä–∏–∫–∞ ‚Äì –õ–æ—Å –ê–Ω–¥–∂–µ–ª–µ—Å': 6}

keyboards_from_server_id = {
    1: 'amsterdam',
    2: 'germany',
    3: 'kz',
    4: 'russia',
    5: 'turkey',
    6: 'usa',
}

server_id_country = {
    1: 'üá±üá∫–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã –ê–º—Å—Ç–µ—Ä–¥–∞–º',
    2: 'üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç',
    3: 'üá∞üáø–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –ê—Å—Ç–∞–Ω–∞',
    4: 'üá∑üá∫–†–æ—Å—Å–∏—è',
    5: 'üáπüá∑–¢—É—Ä—Ü–∏—è –°—Ç–∞–º–±—É–ª',
    6: 'üá∫üá∏–ê–º–µ—Ä–∏–∫–∞ –õ–æ—Å –ê–Ω–¥–∂–µ–ª–µ—Å'
}


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
@dp.callback_query_handler(lambda c: c.data == "get_keys", state="*")
async def get_key_command(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.message.chat.id
    await bot.delete_message(chat_id=telegram_id,
                             message_id=callback_query.message.message_id)

    if not check_user_in_system(callback_query.message.chat.id):
        await bot.send_message(chat_id=telegram_id,
                               text='–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        return
    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    user_id = user_info[0]

    free_tarrif = user_data.free_tariff(user_id)

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–≤–∞—Ç—É—Ä—É
    keyboard = choice_period_not_free()

    if free_tarrif == "UNUSED":
        keyboard = choice_period()

    answer = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    # cur_state = await state.get_state()

    await state.set_state(MyStates.payment_method)

    logger.info(f"–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, user_id - {user_info}")

    with open('images/tarrif.jpeg', 'rb') as photo:
        await bot.send_photo(chat_id=telegram_id,
                             photo=photo,
                             caption=answer,
                             reply_markup=keyboard)

    # await bot.send_message(chat_id=callback_query.message.chat.id, text=answer, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('payment_method:'),
                           state=MyStates.payment_method)
async def process_callback_payment_method(callback_query: types.CallbackQuery, state='*'):

    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    user_id = user_info[0]

    telegram_id = callback_query.message.chat.id

    await bot.delete_message(chat_id=telegram_id,
                             message_id=callback_query.message.message_id)

    price = callback_query.data.split(':')[1]  # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É

    answer = '''üîë –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É VPN –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'''

    await state.set_state(MyStates.pay_from_balance)

    # —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    pay_id = creating_payment(price, user_id)

    desc = f'{user_id},{price},{pay_id}'

    any_pay_link = generate_any_pay_link(str(pay_id), desc, str(price), secret_key)
    # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

    fropay_link = generate_fropay_link(str(pay_id), str(price))
    keyboard = kb_pay(price, any_pay_link, fropay_link)

    with open('images/bill.jpeg', 'rb') as photo:
        message = await bot.send_photo(chat_id=telegram_id,
                             photo=photo,
                             caption=answer,
                             reply_markup=keyboard)

        print(message)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(60)
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        await bot.delete_message(telegram_id, message.message.message_id)

#
# @dp.callback_query_handler(lambda c: c.data.startswith("balance_pay_sever"), state=MyStates.pay_from_balance)
# async def payment_from_balance(callback_query: types.CallbackQuery, state: FSMContext):
#     telegram_id = callback_query.from_user.id
#     user_info = user_data.get_userid_firsname_nickname(telegram_id)
#
#     # –±–µ—Ä–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     user_data_state = await state.get_data()  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å get_state() –Ω–∞ get_data()
#     # –≤—ã—è—Å–Ω—è–µ–º, –ø–æ–∫—É–ø–∫–∞ —ç—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
#     action = user_data_state["action"]
#
#     user_id = user_info[0]
#     current_balance = user_data.get_user_balance_ops_by_user_id(user_id)
#     keyboard = main_menu_inline()
#
#     try:
#         # —ç—Ç–æ –∫–ª–∞—Å—Å
#         user_id = user_info[0]
#         # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞
#         if action == 'pay':
#             # —Å—É–º–º–∞
#             amount = int(user_data_state["price"])
#
#             # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
#             if amount > current_balance:
#                 answer = answer_if_not_balance
#                 logger.info(f"NONE_BALANCE - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
#                 await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboard)
#                 return
#
#             result_pay = pay_from_personal_balance(user_id, amount)
#             # –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É
#
#             if not result_pay:
#                 answer = answer_error
#                 logger.info(f"PAYMENT ERROR - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
#                 await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboard)
#                 return
#
#             # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
#             days = amount_to_days.get(amount, None)
#
#
#             # logger.info(f"{server_id} - server_id")
#
#             # add_keys –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç key_id, key_value, server_id
#             key_id, key_value, server_id = add_keys(user_id, days)
#             logger.info(f"{key_id} - key_id")
#             # logger.info(
#             #     f"–û–ø–ª–∞—Ç–∞, user - {user_info}, server - {server_id},—Å—É–º–º–∞ - {amount}")
#             # –µ—Å–ª–∏ key_id –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è
#             if not key_id:
#                 answer = answer_error
#                 # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
#                 if not money_back(user_id, amount):
#                     logger.error(
#                         f"MONEY BACK - ERROR - —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï–í–û–ó–í–†–ê–©–ï–ù–´ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info}, c—É–º–º–∞ {amount}")
#                 logger.info(
#                     f"MONEY BACK - SUCSSESS - –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å uuser - {user_info}, c—É–º–º–∞ {amount}")
#
#                 await bot.send_message(err_send,
#                                        f"MONEY BACK - ERROR - —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï–í–û–ó–í–†–ê–©–ï–ù–´ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info}, "
#                                        f"c—É–º–º–∞ {amount}")
#                 await bot.send_message(chat_id=telegram_id,
#                                        text=answer,
#                                        reply_markup=keyboard)
#                 return
#
#             # –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
#             referer_user_id = user_data.get_referrer_user_id(user_id)
#             if user_data.get_referrer_user_id(user_id):
#                 referer_telegram = user_data.get_tg_if_use_user_id(referer_user_id)
#                 if not add_referral_bonus(user_id, amount):
#                     await bot.send_message(chat_id=err_send,
#                                            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
#                 try:
#                     await bot.send_message(referer_telegram, f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {amount * 0.2} —Ä—É–±–ª–µ–π')
#                 except:
#                     pass
#             # –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç—ã –≤—ã—Å—ã–ª–∞–µ–º –µ–º—É –∫–ª—é—á
#             answer = answer_if_buy(key_value, server_id)
#
#             # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#             await bot.delete_message(chat_id=telegram_id,
#                                      message_id=callback_query.message.message_id)
#
#             # await bot.send_message(chat_id=telegram_id,
#             #                        text=answer,
#             #                        parse_mode="HTML",
#             #                        disable_web_page_preview=True,
#             #                        reply_markup=keyboard)
#
#             with open('images/key.jpeg', 'rb') as photo:
#                 await bot.send_photo(chat_id=telegram_id,
#                                      photo=photo,
#                                      parse_mode="HTML",
#                                      caption=answer,
#                                      reply_markup=keyboard)
#
#             await state.finish()  # –∏–ª–∏ await state.set_state("another_state")
#
#         # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∞ –Ω–µ –ø–æ–∫—É–ø–∫–∞
#         if action == "renewal":
#             # –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–ª—é—á
#             month = user_data_state["month"]
#             # –∏–º—è –∫–ª—é—á–∞
#             key_name = user_data_state["key_name"]
#             # —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
#             amount = amount_to_month.get(month, None)
#             logger.info(
#                 f"PROCESS:–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è , user - {user_info}, key_name -  {key_name}, —Å—É–º–º–∞ -  {amount}")
#
#             if amount > current_balance:
#                 answer = answer_if_not_balance
#                 logger.info(
#                     f"NONE_BALANCE - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
#                 await bot.send_message(chat_id=telegram_id, text=answer)
#                 return
#
#             if not pay_from_personal_balance(user_id, amount):
#                 answer = answer_error
#                 logger.info(f"PAYMENT ERROR - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ —É user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
#                 await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboard)
#                 return
#
#             if not renewal_keys(user_id, key_name, month):
#                 await bot.send_message(chat_id=telegram_id, text=answer_error, reply_markup=keyboard)
#                 if not money_back(user_id, amount):
#                     await bot.send_message(err_send,
#                                            f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info},c—É–º–º–∞ {amount}")
#                 return
#
#             if user_data.get_referrer_user_id(user_id):
#                 if not add_referral_bonus(user_id, amount):
#                     await bot.send_message(chat_id=err_send,
#                                            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
#
#             answer = f"–ü—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ \"<b>{key_name}</b>\" –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æüëå!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ <b>¬´Off Radar¬ª!!</b> üòá"
#             keyboard = main_menu_inline()
#             await bot.delete_message(chat_id=callback_query.message.chat.id,
#                                      message_id=callback_query.message.message_id)
#             await bot.send_message(chat_id=callback_query.message.chat.id, text=answer, parse_mode="HTML",
#                                    reply_markup=keyboard)
#
#             await state.finish()  # –∏–ª–∏ await state.set_state("another_state")
#
#     except Exception as e:
#         logger.error(f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
#         await bot.send_message(telegram_id, answer_error, reply_markup=main_menu_inline())
#         await bot.send_message(err_send,
#                                f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")

# inline –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@dp.callback_query_handler(lambda c: c.data == "go_back", state="*")
async def process_callback_go_back(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)

    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    with open('images/menu.jpeg', 'rb') as photo:
        await bot.send_photo(chat_id=callback_query.message.chat.id,
                             photo=photo,
                             caption=instruction,
                             parse_mode="HTML",
                             reply_markup=main_menu_inline())

    logger.info(f"–û—Ç–º–µ–Ω–∞ - user - {user_info}")


@dp.callback_query_handler(lambda c: c.data == "subscribe_check", state="*")
async def subscribe_no_thanks(callback_query: types.CallbackQuery):

    User_Data = UserData()
    telegram_id = callback_query.from_user.id

    user_id = User_Data.get_user_id(telegram_id)

    answer = '''–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!

‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–æ–º –ë–ï–°–ü–õ–ê–¢–ù–û! 
'''


    subscribe_keyboard = subscribe()

    # –í—ã—è—Å–Ω—è–µ–º, –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —é–∑–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
    use_free_tariff = User_Data.free_tariff_tg(telegram_id)
    chat_member = await bot.get_chat_member(chat_id="@off_radar",
                                            user_id=telegram_id)

    if chat_member.status in ["member", "administrator", "creator", "owner"]:
        if use_free_tariff == "UNUSED":

            key_value, server_id = add_free_keys(user_id)

            answer = text_free_tariff(server_id, key_value)

            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=answer, reply_markup=main_menu_inline(),
                                   parse_mode="HTML", disable_web_page_preview=True)

            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
        else:
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
    else:
        await bot.send_message(chat_id=callback_query.message.chat.id,
                               text=answer,
                               reply_markup=subscribe_keyboard)


#
@dp.callback_query_handler(lambda c: c.data == "subscribe_ago", state="*")
async def check_subscription(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)
    telegram_id = callback_query.from_user.id

    answer = """üéÅ <b>–ü–û–î–ê–†–û–ö –î–õ–Ø –í–ê–° </b>üéÅ

‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–æ–º –ë–ï–°–ü–õ–ê–¢–ù–û! 
"""


    try:
        User_Data = UserData()

        user_id = User_Data.get_user_id(telegram_id)

        with open('images/present.jpeg', 'rb') as photo:
            await bot.send_photo(chat_id=telegram_id,
                                 photo=photo,
                                 caption=answer,
                                 parse_mode="HTML",
                                 reply_markup=subscribe())

        # –í—ã—è—Å–Ω—è–µ–º, –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —é–∑–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
        # use_free_tariff = User_Data.free_tariff_tg(telegram_id)
        # chat_member = await bot.get_chat_member(chat_id="@off_radar",
        #                                         user_id=telegram_id)

        # if chat_member.status in ["member", "administrator", "creator", "owner"]:
        #     if use_free_tariff == "UNUSED":
        #         await bot.send_message(chat_id=callback_query.from_user.id,
        #                                text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫",
        #                                reply_markup=kb_free_tariff)
        #         await bot.delete_message(chat_id=callback_query.message.chat.id,
        #                                  message_id=callback_query.message.message_id)
        #     else:
        #         await bot.delete_message(chat_id=callback_query.message.chat.id,
        #                                  message_id=callback_query.message.message_id)
        # else:
        #     await bot.send_message(chat_id=callback_query.message.chat.id,
        #                            text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",
        #                            reply_markup=subscribe_keyboard)
    except Exception as e:
        logger.error(f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')
        await bot.send_message(err_send, f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')


# @dp.callback_query_handler(lambda c: c.data == "", state="*")
# async def check_subscription(callback_query: types.CallbackQuery):

@dp.message_handler(commands=['my_info'], state="*")
async def my_info(message: types.Message):
    try:
        user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

        user_id = user_info[0]

        all_info = user_data.get_user_info(user_id)

        txt_user_id = f"–ú–æ–π user_id : {user_id}\n"

        answer = txt_user_id + all_info

        await message.reply(answer, disable_web_page_preview=True,
                            parse_mode="HTML")
        logger.info(f"my_info command - user {user_id}")

    except Exception as e:
        logger.info(f"COMMAND_ERROR - /my_info, {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ .{e}")


@dp.message_handler(commands=['help'], state="*")
async def my_info(message: types.Message):
    await message.reply(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {support}")


@dp.message_handler(commands=['instruction'], state="*")
async def my_info(message: types.Message):
    await message.reply(instruction, parse_mode="HTML", disable_web_page_preview=True)
