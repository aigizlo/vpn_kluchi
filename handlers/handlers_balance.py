import urllib.parse
import hashlib

from balance.balance import generate_payment_url
from logs.logger import logger
from aiogram.dispatcher import FSMContext
from db_conn.get_conn import create_connection
from config import dp, bot, secret_key
from keyboards.keyboards import *
from states import MyStates
from text import answer_error
from user_data import UserData, check_user_in_system

mydb = create_connection()

user_data = UserData()

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == 'üí∞–ë–∞–ª–∞–Ω—Å', state='*')
async def balance_command(message: types.Message, state: FSMContext):

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    try:
        keyboard = balance_keyboard()

        # –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –∫–ª–∞—Å—Å–∞ UserData
        user_id = user_data.get_user_id(message.from_user.id)

        user_balance = user_data.get_user_balance_ops_by_user_id(user_id)

        answer2 = f"–í–∞—à –±–∞–ª–∞–Ω—Å {user_balance} —Ä—É–±–ª–µ–π"
        cur_state = await state.get_state()

        logger.info(f"PROCESS:balance_command, user_id - {user_id}")
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        await state.set_state(MyStates.state_balance)
        await message.answer(answer2, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:balance_command, user_id - {user_id}")
        await message.answer(answer_error, reply_markup=main_menu())


@dp.message_handler(lambda message: message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', state=MyStates.state_balance)
async def replenish_balance_comand(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –∏–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å")
    await state.set_state(MyStates.state_replenish_balance)

# def pay_link(amount, project_id, secret_key, pay_id):
#     arr_sign = [project_id, pay_id, amount, secret_key]
#     sign = hashlib.sha256(":".join(arr_sign).encode()).hexdigest()
#     payment_url = f"https://anypay.io/merchant?{sign}"
#     return payment_url


@dp.message_handler(state=MyStates.state_replenish_balance)
async def get_amount(message: types.Message):
    amount_str = message.text

    try:
        amount = int(amount_str)
        if isinstance(amount, int):
            link = generate_payment_url("20", str(amount), secret_key)
            keyboard = kb_pay(amount, link)
            await message.answer(f"–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª", reply_markup = keyboard)
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")





# # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
# @dp.message_handler(lambda message: message.text == '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', state=MyStates.state_balance)
# async def balance_command(message: types.Message, state: FSMContext):
#     telegram_id = message.from_user.id
#     name_key = name_keys(telegram_id)
#
#     keyboard = generate_key_buttons(name_key)
#
#     keyboard_not_keys  = back_button()
#
#     # user_balance = balance(message.from_user.id)
#
#     answer_if_have_keys = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:"
#     answer_if_not_keys = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π"
#     cur_state = await state.get_state()
#
#     reply_keyboard = keyboard_not_keys if name_key == [] else keyboard
#     text = answer_if_not_keys if name_key == [] else answer_if_have_keys
#     logging.info(f"–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ , state - {cur_state}")
#     # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å —á–µ—Ç—ã—Ä—å–º—è –∫–Ω–æ–ø–∫–∞–º–∏
#     await state.set_state(MyStates.state_balance)
#     await message.answer(text, reply_markup=reply_keyboard)