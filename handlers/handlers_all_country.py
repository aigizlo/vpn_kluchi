from logger import logger
import re

from config import dp
from aiogram.dispatcher import FSMContext

from handlers.handlers import MyStates
from logic_keys.add_keys import check_names

from keyboards.keyboards import *
from text import subscription_prompt, ask_server_name, ask_server_name_2, ask_server_name_3, \
    ask_server_name_4, payment_amount_prompt, all_country, answer_error, instruction
from user_data import UserData

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
allowed_characters_pattern = r"^[a-zA-Z–∞-—è–ê-–Ø0-9\s]+$"

country_server_id = {
    'üá±üá∫–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã ‚Äì –ê–º—Å—Ç–µ—Ä–¥–∞–º': 1,
    'üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è ‚Äì –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç': 2,
    'üá∞üáø–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äì –ê—Å—Ç–∞–Ω–∞': 3,
    'üá∑üá∫–†–æ—Å—Å–∏—è ‚Äì –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 4,
    'üáπüá∑–¢—É—Ä—Ü–∏—è ‚Äì –°—Ç–∞–º–±—É–ª': 5
}

keyboards_from_server_id = {
    1: 'amsterdam',
    2: 'germany',
    3: 'kz',
    4: 'russia',
    5: 'turkey'
}

user_data = UserData()


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞–∫—É—é –ª–∏–±–æ —Å—Ç—Ä–∞–Ω—É
@dp.message_handler(lambda message: message.text in country_server_id, state='*')
async def select_country(message: types.Message, state: FSMContext):
    try:
        server_id = country_server_id.get(message.text)
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–ª–∞–≤—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç country
        country = keyboards_from_server_id.get(server_id)
        keyboard = generate_tariff_keyboard(country)
        await state.update_data(server=server_id)
        # –æ—Ç–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è state_tarrif
        await state.set_state(MyStates.state_tarrif)
        await message.answer(subscription_prompt, reply_markup=keyboard)
        logger.info(
            f"PROCESS:select_country, user - {message.from_user.id} server - {server_id}")

    except Exception as e:
        await message.answer(answer_error, reply_markup=main_menu())
        logger.error(f"ERROR:select_country, user - {message.from_user.id},, –æ—à–∏–±–∫–∞ - {e}")


# –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ (–≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞)
@dp.message_handler(lambda message: message.text in all_country,
                    state=MyStates.state_tarrif)
async def select_tariff(message: types.Message, state: FSMContext):
    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard = back_button()

    telegram_id = message.from_user.id

    try:
        amount = int(message.text.split(" ‚Äî ")[-1].split(" ")[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞

        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(amount=amount)
        # –æ—Ç–ª–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_state(MyStates.state_key_name)
        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —é–∑–µ—Ä–∞
        await message.answer(ask_server_name, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:select_tariff, user - {telegram_id}, –æ—à–∏–±–∫–∞ - {e}")
        await message.answer(answer_error, reply_markup=keyboard)


# —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message_handler(state=MyStates.state_key_name)
async def process_key_name(message: types.Message, state: FSMContext):
    # —ç—Ç–æ –∫–ª–∞—Å—Å, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    User_Data = UserData()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤—Ä–∞ —é–∑–µ—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    key_name = message.text
    telegram_id = message.from_user.id
    # –∏—â–µ–º –µ–≥–æ user_id
    try:
        user_id = User_Data.get_user_id(telegram_id)
        # –∑–¥–µ—Å—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data_state = await state.get_data()
        amount = user_data_state["amount"]
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤ –º–µ–Ω—é –µ—Å–ª –Ω–∞–∂–∞–ª–∏ –ù–ê–ó–ê–î
        if message.text == 'üîô–ù–∞–∑–∞–¥':
            keyboard = main_menu()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:/n" + instruction, parse_mode="HTML", reply_markup=keyboard)
            await state.finish()
            return
        # –µ—Å–ª–∏ –∏–º—è –¥–ª–∏–Ω–Ω–æ–µ - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        if len(key_name) > 35:
            await message.answer(ask_server_name_2)
            return
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
        if check_names(user_id, key_name):
            await message.answer(ask_server_name_3)
            return
        # –∏—Å–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
        if not re.match(allowed_characters_pattern, key_name):
            await message.answer(ask_server_name_4)
            return
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Ö –¥–∞–ª—å—à–µ
        await state.update_data(key_name=key_name, action="pay")

        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É
        answer = payment_amount_prompt(amount)

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        pay_keyboard = get_pay_method_keyboard()

        await message.answer(answer, parse_mode='HTML', reply_markup=pay_keyboard)
        # –æ—Ç–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è pay_from_balance
        await state.set_state(MyStates.pay_from_balance)

        logger.info(f"PROCESS:process_key_name, user - {telegram_id}")
    except Exception as e:
        logger.info(f"ERROR:process_key_name, user - {telegram_id}, {e}")
        await message.answer(answer_error, reply_markup=main_menu())
