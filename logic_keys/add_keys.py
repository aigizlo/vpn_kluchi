import logging

from config import bot, err_send
from db_conn.get_conn import create_connection
import datetime
from logs.logger import logger

# SQL-–∑–∞–ø—Ä–æ—Å—ã
sql_query_check_name = """SELECT user_keys.name FROM 
                            users JOIN user_keys ON users.user_id = user_keys.user_id 
                                WHERE users.user_id = %s"""

sql_select_user_id = "SELECT user_id FROM users WHERE user_id = %s"

sql_select_unused_key = "SELECT * FROM outline_keys WHERE used = 0 AND server_id = %s"

sql_update_key_used = "UPDATE outline_keys SET used = 1 WHERE outline_key_id = %s AND used = 0"

sql_insert_user_key = """INSERT INTO user_keys (user_id, key_id, name, start_date, stop_date)
                           VALUES (%s, %s, %s, %s, %s)"""


async def add_keys(server_id, user_id, key_name, days):
    mydb = create_connection()
    # —Å—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª—é—á–∞
    start_date = datetime.datetime.now()
    stop_date = start_date + datetime.timedelta(days=days)

    try:
        with mydb.cursor(buffered=True) as mycursor:

            try:
                # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
                mycursor.execute(sql_select_unused_key, (server_id,))
                result_id = mycursor.fetchone()

                if result_id is None:
                    logger.error(f"–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• : "
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞,  {server_id}")
                    await bot.send_message(err_send, "–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• "
                                                     "–ø—Ä–æ–≤–µ—Ä—å —Å–∫—Ä–∏–ø—Ç create_keys")

                    return False

                _key_id, _outline_id, _sever_id, _key_value, _used = result_id
                logger.info(
                    f"–ö—É–ø–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á id : {_key_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, c–µ—Ä–≤–µ—Ä {server_id}")
            except Exception as e:
                logger.error(
                    f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                await bot.send_message(err_send, f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                return False

            try:
                # –º–µ–Ω—è–µ–º used —Å 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
                mycursor.execute(sql_update_key_used, [_outline_id])
            except Exception as e:
                logger.error(f'KEY_GET_ERROR –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

            try:
                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É user_keys –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º –∫–ª—é—á, + –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
                mycursor.execute(
                    sql_insert_user_key, (user_id,
                                          _key_id,
                                          key_name,
                                          start_date,
                                          stop_date)
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á {_key_id},"
                            f"{key_name},"
                            f"—é–∑–µ—Ä -  {user_id}")
            except Exception as e:
                logger.error(
                    f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ user_keys + '
                    f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : {user_id}, {e}')
                await bot.send_message(err_send, f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ user_keys + '
                    f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

        return _key_id
    except Exception as e:
        logging.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        await bot.send_message(err_send, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        return False


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
def check_names(user_id, key_name):
    mydb = create_connection()

    if mydb is None:
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î')
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"

    try:
        with mydb.cursor(buffered=True) as mycursor:
            mycursor.execute(sql_query_check_name, (user_id,))
            result = mycursor.fetchall()

        return (key_name,) in result
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –¥–ª—è user_id {user_id}: {e}')
        return False


def keys_to_send(key_data_amster,
                 key_data_german,
                 key_data_kz,
                 key_data_russia,
                 key_data_turkey,
                 ):
    lst_answer = []

    def country_text(name, key, date):
        text = f"""–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ <b>"{name}"</b>,\n - <code>{key}</code>\n(üëÜ–∫–ª–∏–∫–Ω–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n- –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {date}\n\n"""

        return text

    if key_data_amster:
        amsterdam_keys_text = "üá≥üá±<b>–ö–ª—é—á–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã - –ê–º—Å—Ç–µ—Ä–¥–∞–º</b> :\n\n"
        for key, date, name in key_data_amster:
            formatted_date = date.strftime('%d %B %Y')
            amsterdam_keys_text += country_text(name, key, formatted_date)
        lst_answer.append(amsterdam_keys_text)

    if key_data_german:
        germany_keys_text = "üá©üá™<b>–ö–ª—é—á–∏ –ì–µ—Ä–º–∞–Ω–∏–∏ - –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç</b> :\n\n"
        for key, date, name in key_data_german:
            formatted_date = date.strftime('%d %B %Y')
            germany_keys_text += country_text(name, key, formatted_date)
        lst_answer.append(germany_keys_text)

    if key_data_kz:
        kz_keys_text = "üá∞üáø<b>–ö–ª—é—á–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –ê–ª–º–∞—Ç—ã</b> :\n\n"
        for key, date, name in key_data_kz:
            formatted_date = date.strftime('%d %B %Y')
            kz_keys_text += country_text(name, key, formatted_date)
        lst_answer.append(kz_keys_text)

    if key_data_russia:
        russia_keys_text = "üá∑üá∫<b>–ö–ª—é—á–∏ –†–æ—Å—Å–∏—è - –°–ü–ë</b> :\n\n"
        for key, date, name in key_data_russia:
            formatted_date = date.strftime('%d %B %Y')
            russia_keys_text += country_text(name, key, formatted_date)
        lst_answer.append(russia_keys_text)

    if key_data_turkey:
        turkey_keys_text = "üáπüá∑<b>–ö–ª—é—á–∏ –¢—É—Ä—Ü–∏—è - –°—Ç–∞–º–±—É–ª</b> :\n\n"
        for key, date, name in key_data_turkey:
            formatted_date = date.strftime('%d %B %Y')
            turkey_keys_text += country_text(name, key, formatted_date)
        lst_answer.append(turkey_keys_text)

    if not key_data_amster and not key_data_german and not key_data_kz and not key_data_russia and not key_data_turkey:
        answer = f"""–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–πüôÅ
                \n–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞, –Ω–∞–∂–º–∏—Ç–µ <b>"–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"</b>"""
        return answer
    else:
        return lst_answer

# def chek_promo_name(name_promo):
#     now = datetime.datetime.now()
#     sql_query = f"""SELECT * FROM users WHERE promocode = '{name_promo}'"""
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#             result = mycursor.fetchone()
#
#         return result
#
#     except mysql.connector.errors as err:
#         logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {name_promo}, –≤—Ä–µ–º—è {now}',
#                      err)
#
#
# def chek_promo_telegram_id(telegram_id):
#     now = datetime.datetime.now()
#     sql_query = f"""SELECT promocode  FROM users WHERE telegram_id = {telegram_id}"""
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#             result = mycursor.fetchone()
#
#         return result
#
#     except mysql.connector.errors as err:
#         logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {telegram_id}, –≤—Ä–µ–º—è {now}',
#                      err)
#
#
# def save_promocode(telegram_id, name_promo):
#     now = datetime.datetime.now()
#     sql_query = f"""UPDATE users SET promocode = '{name_promo}' WHERE telegram_id = {telegram_id};"""
#
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#
#     except mysql.connector.Error as err:
#         logger.error(
#             f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {name_promo}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤—Ä–µ–º—è {now}',
#             err)
