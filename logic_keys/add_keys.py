import logging
import random

from telebot_ import sync_send_message

from config import err_send, managers
from get_conn import create_connection
import datetime
from logger import logger
from user_data import execute_query

# SQL-–∑–∞–ø—Ä–æ—Å—ã

sql_get_server_id = '''SELECT server_id FROM outline_keys WHERE outline_key_id = %s'''

sql_delete_from_bd = "DELETE FROM outline_keys WHERE outline_key_id = %s"

sql_delete_from_bd2 = "DELETE FROM user_keys WHERE key_id = %s"


sql_set_new_key_id = "UPDATE user_keys SET key_id = %s WHERE key_id = %s"

sql_get_outline_key_id = "SELECT outline_key_id FROM outline_keys WHERE key_id = %s"

sql_query_check_name = """SELECT user_keys.name FROM 
                            users JOIN user_keys ON users.user_id = user_keys.user_id 
                                WHERE users.user_id = %s"""

sql_select_user_id = "SELECT user_id FROM users WHERE user_id = %s"

sql_select_unused_key = "SELECT * FROM outline_keys WHERE used = 0 AND server_id = %s"

sql_update_key_used = "UPDATE outline_keys SET used = 1 WHERE outline_key_id = %s AND used = 0 AND server_id = %s"

sql_insert_user_key = """INSERT INTO user_keys (user_id, key_id, start_date, stop_date)
                           VALUES (%s, %s, %s, %s)"""

server_id_country_for_txt = {
    1: "üá©üá™<b>–ö–ª—é—á–∏ –ì–µ—Ä–º–∞–Ω–∏–∏ - –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç</b> :\n\n",
    2: "üá∫üá∏<b>–ö–ª—é—á–∏ –ê–º–µ—Ä–∏–∫–∞ - –õ–æ—Å –ê–Ω–¥–∂–µ–ª–µ—Å</b> :\n\n"
}


def get_minimum_used_server():
    sql = """SELECT server_id FROM outline_keys GROUP BY server_id HAVING SUM(used = 1) <= 1"""
    sql2 = "SELECT DISTINCT server_id FROM outline_keys"
    result = execute_query(sql)
    if not result:
        result2 = execute_query(sql2)

        return random.choice(result2)[0]

    return result[0][0]


def add_keys(user_id, days):
    server_id = get_minimum_used_server()
    logger.info(f"get_minimum_used_server - {server_id}")
    mydb = create_connection()
    # —Å—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª—é—á–∞
    start_date = datetime.datetime.now()
    stop_date = start_date + datetime.timedelta(days=days)

    try:
        with mydb.cursor(buffered=True) as mycursor:
            try:
                # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
                mycursor.execute(sql_select_unused_key, (server_id,))
                result_id = mycursor.fetchone()

                if result_id is None:
                    logger.error(f"NOT_FREE_KEYS –ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• : "
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞,  {server_id}")
                    sync_send_message(err_send, "NOT_FREE_KEYS –ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• "
                                                "–ø—Ä–æ–≤–µ—Ä—å —Å–∫—Ä–∏–ø—Ç create_keys")

                    return False

                _key_id, _outline_id, _server_id, _key_value, _used = result_id
                logger.info(
                    f"GET_NEW_KEY –ö—É–ø–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á id : {_key_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, —Å–µ—Ä–≤–µ—Ä {server_id}")
            except Exception as e:
                logger.error(
                    f'GET_NEW_KEY_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                sync_send_message(err_send,
                                  f'GET_NEW_KEY_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                return False

            try:
                # –º–µ–Ω—è–µ–º used —Å 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
                mycursor.execute(sql_update_key_used, (_outline_id, server_id,))
            except Exception as e:
                logger.error(f'GET_NEW_KEY_ERROR –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

            try:
                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É user_keys –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º –∫–ª—é—á, + –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
                mycursor.execute(
                    sql_insert_user_key, (user_id,
                                          _key_id,
                                          start_date,
                                          stop_date)
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á {_key_id},"
                            f"—é–∑–µ—Ä -  {user_id}")
            except Exception as e:
                logger.error(
                    f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ user_keys + '
                    f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : user_id - {user_id}, {e}')
                sync_send_message(err_send, f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ user_keys + '
                                            f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

        return _key_id, _key_value, _server_id
    except Exception as e:
        logging.error(f'GET_NEW_KEY_ERROR:–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        sync_send_message(err_send, f'GET_NEW_KEY_ERROR:–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        return False


def add_free_keys(user_id):
    days = 10
    mydb = create_connection()
    server_id = get_minimum_used_server()

    # —Å—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª—é—á–∞
    start_date = datetime.datetime.now()
    stop_date = start_date + datetime.timedelta(days=days)

    try:
        with mydb.cursor(buffered=True) as mycursor:
            try:
                logger.info('–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á')
                # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
                mycursor.execute(sql_select_unused_key, (server_id,))
                result_id = mycursor.fetchone()

                if result_id is None:
                    logger.error(f"–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• : "
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞,  {server_id}")
                    sync_send_message(err_send, "–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• "
                                                "–ø—Ä–æ–≤–µ—Ä—å —Å–∫—Ä–∏–ø—Ç create_keys")

                    return False

                _key_id, _outline_id, _server_id, _key_value, _used = result_id
                logger.info(
                    f"GET_TRIAL_KEY id : {_key_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, —Å–µ—Ä–≤–µ—Ä {server_id}")
            except Exception as e:
                logger.error(
                    f'GET_TRIAL_KEY_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                sync_send_message(err_send,
                                  f'GET_TRIAL_KEY –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ë–î id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, {e}')
                return False

            try:
                # –º–µ–Ω—è–µ–º used —Å 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
                mycursor.execute(sql_update_key_used, (_outline_id, server_id,))
            except Exception as e:
                logger.error(f'GET_TRIAL_KEY –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

            try:
                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É user_keys –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º –∫–ª—é—á, + –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
                mycursor.execute(
                    sql_insert_user_key, (user_id,
                                          _key_id,
                                          start_date,
                                          stop_date)
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á {_key_id},"
                            f"—é–∑–µ—Ä -  {user_id}")
            except Exception as e:
                logger.error(
                    f'GET_TRIAL_KEY_ERROR –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ user_keys + '
                    f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : user_id - {user_id}, {e}')
                sync_send_message(err_send, f'GET_TRIAL_KEY_ERROR –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ user_keys + '
                                            f'–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ : {user_id}, {e}')

                return False

        return _key_value, _server_id
    except Exception as e:
        logging.error(f'GET_TRIAL_KEY_ERROR –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        sync_send_message(err_send, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {user_id}, –æ—à–∏–±–∫–∞ :{e}')
        return False


def keys_send(keys_lst):
    txt = ''

    unic_server_id = 0

    def text(key_id, key, date):
        text = f"""<b>–ö–ª—é—á ‚Ññ {key_id}</b> - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {date}\n\nüëá(–∫–ª–∏–∫–Ω–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n<code>{key}</code>\n\n"""

        return text

    def country_text(server_id, key_id, key, date):
        txt = server_id_country_for_txt.get(server_id)

        text = f"""<b>–ö–ª—é—á ‚Ññ {key_id}</b> - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {date}\n\nüëá(–∫–ª–∏–∫–Ω–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n<code>{key}</code>\n\n"""

        return txt + text

    for key_data in keys_lst:
        key_id = key_data[0]
        server_id = key_data[1]
        key_value = key_data[2]
        key_date = key_data[3].strftime('%d %B %Y')

        if unic_server_id == server_id:
            txt += text(key_id, key_value, key_date)
        else:
            txt += country_text(server_id, key_id, key_value, key_date)
            unic_server_id = server_id

    return txt


def exchange_server(key_id, server_id):
    mydb = create_connection()
    try:
        with mydb.cursor(buffered=True) as mycursor:
            try:
                logger.info('–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á')
                # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á
                mycursor.execute(sql_select_unused_key, (server_id,))
                result_id = mycursor.fetchone()

                if result_id is None:
                    logger.error(f"–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• : "
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞,  {server_id}")
                    sync_send_message(err_send, "–ù–ï–•–í–ê–¢–ö–ê –°–í–û–ë–û–î–ù–´–• –ö–õ–Æ–ß–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–• "
                                                "–ø—Ä–æ–≤–µ—Ä—å —Å–∫—Ä–∏–ø—Ç create_keys")

                    return False

                _key_id, _outline_id, _sever_id, _key_value, _used = result_id

                logger.info(
                    f"–í–∑—è—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—è –¥–ª—è —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏ –∫–ª—é—á id : {_key_id}, —Å–µ—Ä–≤–µ—Ä {server_id}")
            except Exception as e:
                logger.error(
                    f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î , {e}')
                sync_send_message(err_send,
                                  f'KEY_GET_ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ë–î {e}')
                return False

            # –≤–Ω–æ—Å–∏–º –Ω–æ–≤—ã–π key_id
            execute_query(sql_set_new_key_id, (_key_id, key_id,))
            # –º–µ–Ω—è–µ–º used —Å 0 –Ω–∞ 1 —É —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            mycursor.execute(sql_update_key_used, (_outline_id, server_id,))

            # –ø–æ–ª—É—á–∞–µ–º outline_key_id —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
            outline_key_id = execute_query(sql_get_outline_key_id, (key_id,))

            server_id = execute_query(sql_get_server_id, (outline_key_id[0][0],))

            manager = managers.get(server_id[0][0])
            try:
                manager.delete(outline_key_id[0][0])
                logger.info(f"DELETE_KEYS_FROM_MANAGER - –∫–ª—é—á - {key_id} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                logger.error(
                    f"ERROR:DELETE_KEYS_FROM_MANAGER - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id} –∏–∑ outline manager, –æ—à–∏–±–∫–∞ - {e}")
            try:
                execute_query(sql_delete_from_bd, (outline_key_id[0]))
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                logger.error(
                    f"ERROR:DELETE_KEYS_FROM_DB - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id} –∏–∑ outline_keys, –æ—à–∏–±–∫–∞ - {e}")

        return _key_value

    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª—é—á–∞ - {e}")

        return False


def delete_key(key_id):
    mydb = create_connection()
    try:
        with mydb.cursor(buffered=True) as mycursor:

            # –ø–æ–ª—É—á–∞–µ–º outline_key_id  –∫–ª—é—á–∞
            outline_key_id = execute_query(sql_get_outline_key_id, (key_id,))

            server_id = execute_query(sql_get_server_id, (outline_key_id[0][0],))

            manager = managers.get(server_id[0][0])
            try:
                manager.delete(outline_key_id[0][0])
                logger.info(f"DELETE_KEYS_FROM_MANAGER - –∫–ª—é—á - {key_id} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                logger.error(
                    f"ERROR:DELETE_KEYS_FROM_MANAGER - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id} –∏–∑ outline manager, –æ—à–∏–±–∫–∞ - {e}")
            try:
                execute_query(sql_delete_from_bd, (outline_key_id[0]))
                execute_query(sql_delete_from_bd2, (key_id,))

            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                logger.error(
                    f"ERROR:DELETE_KEYS_FROM_DB - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id} –∏–∑ outline_keys, –æ—à–∏–±–∫–∞ - {e}")
                return False
        return True

    except Exception as e:

        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ - {e}")

        return False

# def chek_promo_name(name_promo):
#     now = datetime.datetime.now()
#     sql_query = f"""SELECT * FROM users WHERE promocode = '{name_promo}'"""
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#             result = mycursor.fetchone()
#
#         return result
#
#     except mysql.connector.errors as err:
#         logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {name_promo}, –≤—Ä–µ–º—è {now}',
#                      err)
#
#
# def chek_promo_telegram_id(telegram_id):
#     now = datetime.datetime.now()
#     sql_query = f"""SELECT promocode  FROM users WHERE telegram_id = {telegram_id}"""
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#             result = mycursor.fetchone()
#
#         return result
#
#     except mysql.connector.errors as err:
#         logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {telegram_id}, –≤—Ä–µ–º—è {now}',
#                      err)
#
#
# def save_promocode(telegram_id, name_promo):
#     now = datetime.datetime.now()
#     sql_query = f"""UPDATE users SET promocode = '{name_promo}' WHERE telegram_id = {telegram_id};"""
#
#     mydb = create_connection()
#     if mydb is None:
#         logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î', now)
#         return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
#
#     try:
#         with mydb.cursor(buffered=True) as mycursor:
#             # —É–∑–Ω–∞–µ–º user_id —é–∑–µ—Ä–∞
#             mycursor.execute(sql_query)
#
#     except mysql.connector.Error as err:
#         logger.error(
#             f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ : {name_promo}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤—Ä–µ–º—è {now}',
#             err)
